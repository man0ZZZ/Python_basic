# -*- coding: utf-8 -*-
"""BDS_Lin/Multi/Poly_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WuJEnB58FD-g_8gKryHhvTGWQqTHagoM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from vega_datasets import local_data
local_data.list_datasets()

df=local_data.cars()
df.head(20)

df.isna().sum()

df.Horsepower.fillna(df.Horsepower.mean(), inplace=True)

df.Horsepower.isna().sum()

y=df.iloc[:,6:7].values
x=df.iloc[:,4:5].values
plt.scatter(df.Horsepower,df.Acceleration)
plt.xlabel='horsepower'
plt.ylabel='acceleration'

from sklearn.linear_model import LinearRegression
lin_reg=LinearRegression()
lin_reg.fit(x,y)

plt.scatter(df.Horsepower, df.Acceleration, color='black')
plt.plot(x, lin_reg.predict(x), color='black')

lin_reg.intercept_

lin_reg.coef_

lin_reg.predict([[155]])

"""## multiple linear regression"""

x1=df.iloc[:,3:6].values
y1=df.iloc[:,6:7].values

from sklearn.linear_model import LinearRegression
mul_reg =LinearRegression()
mul_reg.fit(x1,y1)

mul_reg.coef_

mul_reg.intercept_

mul_reg.predict([[400,200,4500]])

"""## multiple linear regression with categorical values"""

from google.colab import drive
drive.mount('/content/gdrive')
df2=pd.read_csv('/content/gdrive/MyDrive/BDS_practice_data/50_Startups.csv')
df2.head(20)

"""transform state column into dummy values"""

df2=pd.get_dummies(df2, columns=['State'])

df2.head(20)

""" subset dependent and independent var"""

x3=df2.drop(['Profit'], axis=1).values ##axis0 for rows and 1 for columns
y3=df2['Profit'].values
y3=y3.reshape(len(y3),1)

print(x3)
print(y3)

mul_reg2=LinearRegression()
mul_reg2.fit(x3,y3)
pred_y3=mul_reg2.predict(x3)
mul_reg2.predict([[212716.24, 116983.80, 45173.06, 1,0,0]])

"""## polynomial regression"""

from google.colab import drive
drive.mount('/content/gdrive')

df3=pd.read_csv('/content/gdrive/MyDrive/BDS_practice_data/Position_Salaries.csv')
df3.head(13)

plt.scatter(df3.Level, df3.Salary)

"""first test linear regression"""

y2=df3.iloc[:,-1].values
x2=df3.iloc[:,-2:-1].values

x2,y2

from sklearn.linear_model import LinearRegression
reg3=LinearRegression()
reg3.fit(x2,y2)

plt.scatter(df3.Level, df3.Salary, color='black')
plt.plot(x2, reg3.predict(x2), color='black')

"""use polynomial regression"""

from sklearn.preprocessing import PolynomialFeatures
poly_feat=PolynomialFeatures(degree=4)
x_poly=poly_feat.fit_transform(x2) ## x_poly is the transformed values of x based on the degrees choosen for polynomial eqn
# print(x_poly)
## call linear regression
linreg1_for_polyreg1=LinearRegression()

#now fit the model (means the linear regression model will solve for the vlaues of coefficiencts(betas))
linreg1_for_polyreg1.fit(x_poly,y2)

#get the predicted y values for plotting
y_poly_predicted=linreg1_for_polyreg1.predict(x_poly)
y_poly_predicted

## plot the poly reg line using y predicted value
plt.scatter(x2,y2,color='black')
plt.plot(x2,y_poly_predicted, color='black')

x_poly

## this smooths out the curve(???) basically getting more data points to smooth out the curve
x_grid = np.arange(min(x2), max(x2), 0.1) ##literally taking max and min value in x2 and dividing it into multiple data points in the increament of 0.1

#changing x_grid 1d array to 2D array, which is essential for below fit_transform functions
x_grid = x_grid.reshape((len(x_grid), 1))

from sklearn.preprocessing import PolynomialFeatures
new_poly_feat=PolynomialFeatures(degree=4)
x_grid_poly=new_poly_feat.fit_transform(x_grid)


# from sklearn.linear_model import LinearRegression
# new_lin_reg=LinearRegression()
# new_lin_reg.fit(x_grid,y2)
## will give an error because the x_grid has more values than y2

## So we use the already fitted regression linreg1_for_polyreg1 to predict the new y's

new_pred_y=linreg1_for_polyreg1.predict(x_grid_poly)
plt.scatter(x2,y2,color='black')
## for plotting the line dont use x_grid_poly
plt.plot(x_grid, new_pred_y, color='black')

"""coefficients, intercepts, and prediction"""

linreg1_for_polyreg1.coef_

linreg1_for_polyreg1.intercept_

linreg1_for_polyreg1.predict(poly_feat.fit_transform([[3.66]]))

"""predicted values while using lin reg model and fitted poly reg model"""

reg3.predict([[1.5],[2.7],[8.8],[9.44]])

linreg1_for_polyreg1.predict(poly_feat.fit_transform([[1.5],[2.7],[8.8],[9.44]]))