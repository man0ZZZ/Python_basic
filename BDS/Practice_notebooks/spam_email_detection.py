# -*- coding: utf-8 -*-
"""spam_email_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PiYmyerfUldG7DZbOPzgwaL_Y4ZyDyBW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv('/content/spam.tsv', sep='\t')
df.head(10)

df.label.value_counts()/len(df.index)*100

"""Almost 87% of the label is ham and just 13% is spam. If we use all data set, it may give biased results due to the unbalanced data set. So, we need to reshape the data

"""

## Reshape the data and balance out the data
df_ham=df[df['label']=='ham']
df_spam=df[df['label']=='spam']
df_ham.shape, df_spam.shape

##smaple the df_ham dataset and select just 747 data out of 4825
df_ham=df_ham.sample(df_spam.shape[0])
df_ham.shape

plt.hist(df[df.label=='spam']['length'], bins =100, alpha=0.7)
plt.hist(df[df.label=='ham']['length'], bins =100, alpha=0.7)
plt.show()

plt.hist(df[df.label=='spam']['punct'], bins =100, alpha=0.7)
plt.hist(df[df.label=='ham']['punct'], bins =100, alpha=0.7)
plt.show()

##concat two data frames for further analysis
df_email=pd.concat([df_ham, df_spam])

##tfidf vectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

# Create an instance of TfidfVectorizer
tfidf = TfidfVectorizer()

# Fit and transform the text data
X = tfidf.fit_transform(df_email.message)

y=df_email['label']

X.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X, y, random_state=2, train_size=0.8)

## apply random forest classifier
from sklearn.ensemble import RandomForestClassifier
rf_model=RandomForestClassifier(n_estimators=80)
rf_model.fit(X_train, y_train)

y_pred=rf_model.predict(X_test)

y_test

y_pred

from sklearn.metrics import f1_score, accuracy_score, recall_score, confusion_matrix
print(accuracy_score(y_test, y_pred))
confusion_matrix(y_test, y_pred)

text1 = ['Hello, You are learning natural Language Processing']
text2 = ['Hope you are doing good and learning new things !']
text3 = ['Congratulations, You won a lottery ticket worth $1 Million ! To claim call on 446677']
text4 = ['Oyo, you got $1 Trillion']

tfidf.fit_transform(text3).shape

print(rf_model.predict(tfidf.fit_transform(text1)))
print(rf_model.predict(tfidf.fit_transform(text2)))
print(rf_model.predict(tfidf.fit_transform(text3)))
print(rf_model.predict(tfidf.fit_transform(text4)))

"""Pipeline to combine multiple models"""

## USE PIPELINE
from sklearn.pipeline import Pipeline
pipe=Pipeline([('tfidf',TfidfVectorizer()),('rf_model',RandomForestClassifier(n_estimators=80))])

xtrain, xtest, ytrain, ytest=train_test_split(df_email.message, df_email.label, train_size=0.8, random_state=0)

pipe.fit(xtrain,ytrain)

y_pred_pipe=pipe.predict(xtest)

accuracy_score(ytest, y_pred_pipe)

text1 = ['Hello, You are learning natural Language Processing']
text2 = ['Hope you are doing good and learning new things !']
text3 = ['Congratulations, You won a lottery ticket worth $1 Million ! To claim call on 446677']
text4 = ['Oyo, you got $1 Trillion']
print(pipe.predict(text1))
print(pipe.predict(text2))
print(pipe.predict(text3))
print(pipe.predict(text4))