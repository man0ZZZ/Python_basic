# -*- coding: utf-8 -*-
"""exception_handling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tw_dCIEFs3d0WCVwmbtwws1fXYRfp-9H
"""

#Exception handling

#trying to access the value that is not in th
lst1=[11,12,13,14,15,16,17,18,19]
for i in lst1:
  print(lst1[i])

try:
  lst1=[11,12,13,14,15,16,17,18,19]
  for i in lst1:
    print(lst1[i])
except IndexError as ie:##use the name of the error , in above example, it is IndexError
  print('Exception ',ie)

## universal exception 
## if not sure about the exception,just use EXCEPTION
try:
  lst1=[11,12,13,14,15,16,17,18,19]
  for i in lst1:
    print(lst1[i])
except Exception as ie:## if you not sure which is the error index, you can use EXCEPTION which is universal exception handl
  print('Exception ',ie)

#When both universal and actual exception
## if universal exception is on top, it will override the lower specific exception
try:
  lst1=[11,12,13,14,15,16,17,18,19]
  for i in lst1:
    print(lst1[i])
except Exception as ie:## if you not sure which is the error index, you can use EXCEPTION which is universal exception handl
  print('Exception ',ie)
except IndexError as ie:##use the name of the error , in above example, it is IndexError
  print('Exception ',ie)

try:
  tup1=(11,12,13,14,15,16,17,18,19)
  for i in lst1:
    print(tup1[i])
    tup1.append(tup1[i])
except Exception as ie:## if you not sure which is the error index, you can use EXCEPTION which is universal exception handl
  print('Exception ',ie)
except IndexError as ie:##use the name of the error , in above example, it is IndexError
  print('Exception ',ie)

try:
  tup1=(11,12,13,14,15,16,17,18,19)
  for i in lst1:
    tup1.append(tup1[i])## this error is handled by universal exception
    print(tup1[i])## this is override by the previous universal exception
except Exception as ie:
  print('Exception ',ie)
except IndexError as ie:
  print('Exception ',ie)

try:
  set1={1,2,3,4,5,61,1,1,12,2,2,4,4,4}
  for i in set1:
    print(set1.index(i))
except AttributeError as ie:
  print('Exception ',ie)

try:
  a=4
  b=a/0
  print(b)
except ZeroDivisionError as manoz:
  print('Exception', manoz)

a=[11,12,13,14,15,16]
b=[]
for i in a:
  b.append(a[i])

##index error
try:
  a=[11,12,13,14,15,16]
  b=[]
  for i in a:
    b.append(a[i])
except IndexError as ie:
  print('Exception handling ',ie)

#Write a program to find out the prime factors of a number. Example: prime factors of 56
n=7
factors=[]
for i in range(2,n+1):
  if n%i==0:
    factors.append(i)
print(factors)
prime_factors=[]
for i in factors:
  for j in range(2,i):
    if i%j==0:
      break
  else:
    prime_factors.append(i)
if len(prime_factors)==0:
  print(n,'has no prime factors')
print('Prime factors of',n,'are',prime_factors)

#If all digits of a number n are multiplied by each other repeating with the product, 
#the one digit number obtained at last is called the multiplicative digital root of n. 
#The number of times digits need to be multiplied to reach one digit is called the multiplicative persistance of n
#Example: 86 -> 48 -> 32 -> 6 (MDR 6, MPersistence 3)

# 341 -> 12->2           (MDR 2, MPersistence 2)