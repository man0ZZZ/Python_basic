# -*- coding: utf-8 -*-
"""Stock_analysis_case_study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RYsjBFhdonbC-k38eDWbHSdvEEKj77U6
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas_datareader.data as wb
import datetime
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

"""# EURO stock data
four hour candle data
"""

from google.colab import drive
drive.mount('/content/gdrive')

df=pd.read_csv('/content/gdrive/MyDrive/BDS_practice_data/EUR_STOCK_DATA.csv')
df.head(10)

"""For feature engineering
data preprocessing, cleaning and EDA
making more features from current features to help the model learn better

### hw
#### 1. plot Open vs. Close between any time period entered by the user

#### 2. Plot High vs Low Between any time period entered by the user

#### 3. Check which months over the year had highest Volume

#### 4. Study what are technical Indicators

#### 5. See Seasonal Trends in Closing Price and Find out the months for high Volitality
"""

type(df['Gmt time'][0])

"""solution for 1\
get the inputs as string \
find the strings and then index that match the user input on gmt column\
trim the data frame to include rows between entered period using the indexes\
get the open and close values of new df and plot
"""

def openVclose(start_date,end_date):
  start=start_date+' 00:00:00.000'
  end=end_date+' 20:00:00.000'

  for i in range(len(df.index)):
    if df['Gmt time'][i]==start:
      s=i
    elif df['Gmt time'][i]==end:
      c=i
  try:
    print('start date',df['Gmt time'][s])
    print('end date', df['Gmt time'][c])
    df_plot=df.iloc[s:(c+1),:]
    plt.plot(df_plot['Gmt time'], df_plot.Open, label='open')
    plt.plot(df_plot['Gmt time'], df_plot.Close, label='close')
    # print(len(df_plot.index))
    # print(df_plot)
    plt.legend()
    plt.xticks(rotation=45)
    plt.xticks(df_plot['Gmt time'][::(len(df_plot.index))//4])
    plt.show()
  except:
    print('please enter valid date')

start_date=str(input('input your start date in the format dd.mm.yyyy: '))
end_date=str(input('input your close date in the format dd.mm.yyyy: '))
openVclose(start_date,end_date)

"""Quesiton2 solution"""

def highVlow(start_date,end_date):
  start=start_date+' 00:00:00.000'
  end=end_date+' 20:00:00.000'
  for i in range(len(df.index)):
    if df['Gmt time'][i]==start:
      s=i
    if df['Gmt time'][i]==end:
      c=i
  try:
    print('start date',df['Gmt time'][s])
    print('end date', df['Gmt time'][c])
    df_plot=df.iloc[s:(c+1),:]
    plt.plot(df_plot['Gmt time'], df_plot.High, label='high')
    plt.plot(df_plot['Gmt time'], df_plot.Low, label='low')
    plt.legend()
    plt.xticks(rotation=45)
    plt.xticks(df_plot['Gmt time'][::(len(df_plot.index))//4])
    plt.show()
  except:
    print('please enter valid date')

start_date=str(input('input your start date in the format dd.mm.yyyy: '))
end_date=str(input('input your close date in the format dd.mm.yyyy: '))
highVlow(start_date,end_date)

"""Question 3 Check which months over the year had highest Volume
Check which months over the year had highest Volume

caluclate mean volume for each month each year \1 data frames that has 12 jan,feb,march,april,may,june,july..... and rows will be number of year

Question 3 Check which months over the year had highest Volume \solution

Check which months over the year had highest Volume

caluclate mean volume for each month each year

1 data frames that has 12 jan,feb,march,april,may,june,july..... and rows will be number of year
"""

year=[]
month=[]
for i in range(len(df.index)):
  year.append(int(df['Gmt time'][i][6:10]))
  month.append(int(df['Gmt time'][i][3:5]))
df['Month']=month
df['Year']=year
type(df.Month[0])
df.groupby(by='Year').max()

"""Quesiton 5 \See Seasonal Trends in Closing Price and Find out the months for high Volitality"""

(df.groupby(['Year','Month']).Close.max().index[0:96]).values

import numpy as np
x=[]
for i in range(96):
  str1=str((df.groupby(['Year','Month']).Close.max().index).values[i][0])+','+str((df.groupby(['Year','Month']).Close.max().index).values[i][1])
  x.append(str1)
x=np.array(x)

x

"""get the array for maximum closing price for each month"""

y1=(df.groupby(['Year','Month']).Close.max().iloc[0:96]).values
y1

"""get the array for minimum closing price for each month"""

y2=(df.groupby(['Year','Month']).Close.min().iloc[0:96]).values

y_v=y1-y2

y_v

plt.plot(x,y1,label='max')
plt.plot(x,y2,label='min')
plt.legend

plt.plot(x,y_v,label='volatility')

y_v

df_volatility=pd.DataFrame({'Date':x,'Volatility':y_v})
df_volatility.sort_values(by='Volatility', ascending=False).head(15)

Year=[]
Month=[]
for i in range(len(df_volatility.index)):
  lst=df_volatility.Date[i].split(',')
  Year.append(lst[0])
  Month.append(lst[1])
# print(len(Year))
# print(len(Month))
df_volatility['Year']=Year
df_volatility['Month']=Month
df_volatility

ser1=df_volatility.groupby('Month').Volatility.mean()
df_vol_mean=pd.DataFrame(ser1)
df_vol_mean.reset_index(inplace=True)
df_vol_mean.columns=['Month','Volatility']

df_vol_mean.Month=pd.to_numeric(df_vol_mean.Month)

df_vol_mean.sort_values('Month', inplace=True)

plt.plot(df_vol_mean.Month,df_vol_mean.Volatility)
plt.xlabel('month in number')
plt.ylabel('volatility=diff in max and min closing price \n for each month averaged over all the years')
plt.show()

"""
Check which months over the year had highest Volume

caluclate mean volume for each month each year

1 data frames that has 12 jan,feb,march,april,may,june,july..... and rows will be number of year"""

df.head(10)

grouped_vol=df.groupby(by=['Year','Month']).Volume.mean()

grouped_vol=grouped_vol.reset_index()

grouped_vol.head(10)

"""using pivot function to transpose the values into new data frame"""

df_volume=grouped_vol.pivot(index='Year',columns='Month',values='Volume')

df_volume.reset_index(inplace=True)

df_volume.head(10)

col=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
df_volume.columns=col
df_volume.head(10)

df_volume.reset_index(inplace=True)
df_volume.head(10)

"""# Stock analysis with live stock data"""

# Commented out IPython magic to ensure Python compatibility.
from pandas_datareader import data as pdr
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
# %matplotlib inline

"""override"""

yf.pdr_override()

start='2012-01-01'
end='2022-12-31'

tesla =pdr.get_data_yahoo('TSLA', start=start, end=end)
gm=pdr.get_data_yahoo('GM', start=start, end=end)
ford =pdr.get_data_yahoo('F', start=start, end=end)

tesla.tail(10)

